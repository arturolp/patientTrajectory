{
    "collab_server" : "",
    "contents" : "###############################################################\n#\n# Project: Patient Timeline\n# Author: Arturo Lopez Pineda <arturolp@stanford.edu>\n# Date: Aug 25, 2017\n#\n###############################################################\n\nlibrary(ggplot2)\nlibrary(gridExtra)\n\n\nmycolors <-\n  c(\n    \"lightseagreen\",\n    \"lightblue\",\n    \"plum2\",\n    \"darksalmon\",\n    \"papayawhip\",\n    \"hotpink\",\n    \"gold1\",\n    \"deepskyblue\",\n    \"tomato\",\n    \"olivedrab1\"\n  )\nmycodes <-\n  c(\n    \"Visit\",\n    \"Oncology visit\",\n    \"Request lab\",\n    \"Biopsy / Pathology\",\n    \"Chemotherapy\",\n    \"Radiation / Surgery\",\n    \"IHC results\",\n    \"Treatment adjusted\",\n    \"Hospitalization / Metastasis\",\n    \"Remission\"\n  )\n\nevents = read.csv(\"data/event-code-patient-time-example.csv\")\numls = read.csv(\"data/UMLS-codes-descriptions.csv\", row.names=1)\n\n#--------------------------------------\n# Step 0. Define functions\n#--------------------------------------\npatientsTimelines <- function(events, umls) {\n\n  patients = unique(events$PatientID)\n\n  for (patient in patients) {\n    #Obtain only the indexes for a particular patient\n    patient.indexes = which(events$PatientID == patient)\n    single.patient = events[patient.indexes,]\n\n    #Calculate the timeline rows (one row is one year)\n    pat = calculateTimeline(single.patient, umls)\n    plotTimeline(pat, patient, mycolors, mycodes)\n\n  }\n\n  #Combine all patients\n\n}\n\ncalculateTimeline <- function(patient, umls) {\n  patient$year.label = paste(\"year\", ceiling(patient$Time_days / 365), sep = \" \")\n  patient$year = ceiling(patient$Time_days / 365)\n  patient$color = umls[as.character(patient$UMLScode), \"color\"]\n\n  #order by time, adding start and end of segment\n  patient = patient[order(patient$Time_days), ]\n\n  start = c()\n  end = c()\n  time.start = 0\n  time.end = 0\n  for (i in 1:length(patient$Time_days)) {\n    j = i\n    #In case two events occur at the same time\n    while ((patient[j, \"Time_days\"] == patient[j - 1, \"Time_days\"]) &&\n           (j > 1)) {\n      j = j - 1\n    }\n\n    if (j == 1) {\n      time.start = 0\n    }\n    else{\n      if (patient[j, \"year\"] == patient[j - 1, \"year\"])\n        time.start = patient[j - 1, \"Time_days\"] + 1\n      else{\n        time.start = 0\n      }\n    }\n    time.end = patient[i, \"Time_days\"]\n\n\n    # change all values to 1-year format\n    while (time.start > 365) {\n      time.start = time.start - 365\n    }\n\n    while (time.end > 365) {\n      time.end = time.end - 365\n    }\n\n    start = c(start, time.start)\n    end = c(end, time.end)\n  }\n  patient$start = start\n  patient$end = end\n\n  # Add next year's event to current year for completion\n  pat2 = patient\n  j = 1\n  for (i in 1:(dim(patient)[1] - 1)) {\n    if (patient[i, \"year\"] != patient[i + 1, \"year\"]) {\n      #when the year difference is more than 1\n      for (y in patient[i, \"year\"]:(patient[i + 1, \"year\"] - 1)) {\n        #Event to be added\n        pevent = patient[(i + 1), ]\n        pevent$end = 365\n        if (y == patient[i, \"year\"]) {\n          pevent$start = patient$end[i] + 1\n        }\n        else{\n          pevent$start = 0\n        }\n        pevent$year = y\n        pevent$year.label = paste(\"year\", y, sep = \" \")\n        pat2 = rbind(pat2[1:j, ], pevent , pat2[(j + 1):dim(pat2)[1], ])\n        j = j + 1\n      }\n    }\n    j = j + 1\n  }\n\n  return(pat2)\n}\n\n#------------------------\n# plot the patient timeline\n#------------------------\nplotTimeline <- function(patient, patientID, mycolors, mycodes) {\n  years = unique(patient$year.label)\n  years = years[order(years, decreasing=TRUE)]\n  #years = c(\"year 4\", \"year 3\", \"year 2\", \"year 1\")\n\n\n  g <- ggplot(patient) +\n    geom_segment(\n      aes(\n        x = start,\n        xend = end,\n        y = year.label,\n        yend = year.label,\n        colour = color\n      ),\n      size = 14,\n      lineend = \"butt\"\n    ) +\n    scale_y_discrete(limits = years) +\n    ggtitle(paste(\"Patient \", patientID, sep = \"\")) +\n    scale_colour_manual(values = mycolors,\n                        limits = mycolors,\n                        label = mycodes) +\n    labs(fill = \"UMLS grouping\") +\n    theme(\n      #Add a title\n      plot.title = element_text(hjust = 0.5, size = 50),\n      #Remove elements\n      legend.position = \"none\",\n      axis.title.x = element_blank(),\n      axis.text.x = element_blank(),\n      axis.ticks.x = element_blank(),\n      axis.title.y = element_blank(),\n      axis.text.y = element_blank(),\n      axis.ticks.y = element_blank(),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      panel.background = element_blank(),\n      #Add a border\n      panel.border = element_rect(\n        colour = \"black\",\n        fill = NA,\n        size = 1\n      )\n    )\n\n  return(g)\n\n}\n",
    "created" : 1503701348591.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3176387704",
    "id" : "32B9853E",
    "lastKnownWriteTime" : 1503703194,
    "last_content_update" : 1503703194983,
    "path" : "~/Dropbox/PatientTrajectories/Rpackage/patientTrajectory/R/patient-timeline.R",
    "project_path" : "R/patient-timeline.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}