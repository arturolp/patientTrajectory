theme(
#Add a title
plot.title = element_text(hjust = 0.5, size = 50),
#Remove elements
legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
#Add a border
panel.border = element_rect(
colour = "black",
fill = NA,
size = 1
)
)
}
patientsTimelines(events, umls)
patients = unique(events$PatientID)
patients
patient = 1
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
pat.original = events[patient.indexes,]
pat.original
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
single.patient
pat = calculateTimeline(single.patient)
patient = single.patient
patient
patient$year.label = paste("year", ceiling(patient$Time_days / 365), sep = " ")
patient$year = ceiling(patient$Time_days / 365)
patient$color = umls[as.character(patient$UMLScode), "color"]
#o
patient
patient$year.label = paste("year", ceiling(patient$Time_days / 365), sep = " ")
patient$year = ceiling(patient$Time_days / 365)
patient$color = umls[as.character(patient$UMLScode), "color"]
#order by time, adding start and end of segment
patient = patient[order(patient$Time_days), ]
###############################################################
#
# Project: Patient Timeline
# Author: Arturo Lopez Pineda <arturolp@stanford.edu>
# Date: Aug 25, 2017
#
###############################################################
library(ggplot2)
mycolors <-
c(
"lightseagreen",
"lightblue",
"plum2",
"darksalmon",
"papayawhip",
"hotpink",
"gold1",
"deepskyblue",
"tomato",
"olivedrab1"
)
mycodes <-
c(
"Visit",
"Oncology visit",
"Request lab",
"Biopsy / Pathology",
"Chemotherapy",
"Radiation / Surgery",
"IHC results",
"Treatment adjusted",
"Hospitalization / Metastasis",
"Remission"
)
events = read.csv("data/event-code-patient-time-example.csv")
umls = read.csv("data/UMLS-codes-descriptions.csv", row.names=1)
#--------------------------------------
# Step 0. Define functions
#--------------------------------------
patientsTimelines <- function(events, umls) {
patients = unique(events$PatientID)
for (patient in patients) {
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
plotTimeline(pat, mycolors, mycodes)
}
}
calculateTimeline <- function(patient, umls) {
patient$year.label = paste("year", ceiling(patient$Time_days / 365), sep = " ")
patient$year = ceiling(patient$Time_days / 365)
patient$color = umls[as.character(patient$UMLScode), "color"]
#order by time, adding start and end of segment
patient = patient[order(patient$Time_days), ]
start = c()
end = c()
time.start = 0
time.end = 0
for (i in 1:length(patient$Time_days)) {
j = i
#In case two events occur at the same time
while ((patient[j, "Time_days"] == patient[j - 1, "Time_days"]) &&
(j > 1)) {
j = j - 1
}
if (j == 1) {
time.start = 0
}
else{
if (patient[j, "year"] == patient[j - 1, "year"])
time.start = patient[j - 1, "Time_days"] + 1
else{
time.start = 0
}
}
time.end = patient[i, "Time_days"]
# change all values to 1-year format
while (time.start > 365) {
time.start = time.start - 365
}
while (time.end > 365) {
time.end = time.end - 365
}
start = c(start, time.start)
end = c(end, time.end)
}
patient$start = start
patient$end = end
# Add next year's event to current year for completion
pat2 = patient
j = 1
for (i in 1:(dim(patient)[1] - 1)) {
if (patient[i, "year"] != patient[i + 1, "year"]) {
#when the year difference is more than 1
for (y in patient[i, "year"]:(patient[i + 1, "year"] - 1)) {
#Event to be added
pevent = patient[(i + 1), ]
pevent$end = 365
if (y == patient[i, "year"]) {
pevent$start = patient$end[i] + 1
}
else{
pevent$start = 0
}
pevent$year = y
pevent$year.label = paste("year", y, sep = " ")
pat2 = rbind(pat2[1:j, ], pevent , pat2[(j + 1):dim(pat2)[1], ])
j = j + 1
}
}
j = j + 1
}
return(pat2)
}
#------------------------
# plot the patient timeline
#------------------------
plotTimeline <- function(pat, mycolors, mycodes) {
#years = unique(pat2$year.label)
years = years[order(years, decreasing=TRUE)]
#years = c("year 4", "year 3", "year 2", "year 1")
ggplot(pat2) +
geom_segment(
aes(
x = start,
xend = end,
y = year.label,
yend = year.label,
colour = color
),
size = 14,
lineend = "butt"
) +
scale_y_discrete(limits = years) +
ggtitle(paste("Patient ", patient, sep = "")) +
scale_colour_manual(values = mycolors,
limits = mycolors,
label = mycodes) +
labs(fill = "UMLS grouping") +
theme(
#Add a title
plot.title = element_text(hjust = 0.5, size = 50),
#Remove elements
legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
#Add a border
panel.border = element_rect(
colour = "black",
fill = NA,
size = 1
)
)
}
patientsTimelines(events, umls)
patients = unique(events$PatientID)
for (patient in patients) {
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
)
patient = 1
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
pat
plotTimeline(pat, mycolors, mycodes)
plotTimeline <- function(pat, mycolors, mycodes) {
years = unique(pat$year.label)
years = years[order(years, decreasing=TRUE)]
#years = c("year 4", "year 3", "year 2", "year 1")
ggplot(pat2) +
geom_segment(
aes(
x = start,
xend = end,
y = year.label,
yend = year.label,
colour = color
),
size = 14,
lineend = "butt"
) +
scale_y_discrete(limits = years) +
ggtitle(paste("Patient ", patient, sep = "")) +
scale_colour_manual(values = mycolors,
limits = mycolors,
label = mycodes) +
labs(fill = "UMLS grouping") +
theme(
#Add a title
plot.title = element_text(hjust = 0.5, size = 50),
#Remove elements
legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
#Add a border
panel.border = element_rect(
colour = "black",
fill = NA,
size = 1
)
)
}
plotTimeline(pat, mycolors, mycodes)
plotTimeline <- function(patient, mycolors, mycodes) {
years = unique(patient$year.label)
years = years[order(years, decreasing=TRUE)]
#years = c("year 4", "year 3", "year 2", "year 1")
ggplot(patient) +
geom_segment(
aes(
x = start,
xend = end,
y = year.label,
yend = year.label,
colour = color
),
size = 14,
lineend = "butt"
) +
scale_y_discrete(limits = years) +
ggtitle(paste("Patient ", patient, sep = "")) +
scale_colour_manual(values = mycolors,
limits = mycolors,
label = mycodes) +
labs(fill = "UMLS grouping") +
theme(
#Add a title
plot.title = element_text(hjust = 0.5, size = 50),
#Remove elements
legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
#Add a border
panel.border = element_rect(
colour = "black",
fill = NA,
size = 1
)
)
}
plotTimeline(pat, mycolors, mycodes)
###############################################################
#
# Project: Patient Timeline
# Author: Arturo Lopez Pineda <arturolp@stanford.edu>
# Date: Aug 25, 2017
#
###############################################################
library(ggplot2)
mycolors <-
c(
"lightseagreen",
"lightblue",
"plum2",
"darksalmon",
"papayawhip",
"hotpink",
"gold1",
"deepskyblue",
"tomato",
"olivedrab1"
)
mycodes <-
c(
"Visit",
"Oncology visit",
"Request lab",
"Biopsy / Pathology",
"Chemotherapy",
"Radiation / Surgery",
"IHC results",
"Treatment adjusted",
"Hospitalization / Metastasis",
"Remission"
)
events = read.csv("data/event-code-patient-time-example.csv")
umls = read.csv("data/UMLS-codes-descriptions.csv", row.names=1)
#--------------------------------------
# Step 0. Define functions
#--------------------------------------
patientsTimelines <- function(events, umls) {
patients = unique(events$PatientID)
for (patient in patients) {
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
plotTimeline(pat, patient, mycolors, mycodes)
}
}
calculateTimeline <- function(patient, umls) {
patient$year.label = paste("year", ceiling(patient$Time_days / 365), sep = " ")
patient$year = ceiling(patient$Time_days / 365)
patient$color = umls[as.character(patient$UMLScode), "color"]
#order by time, adding start and end of segment
patient = patient[order(patient$Time_days), ]
start = c()
end = c()
time.start = 0
time.end = 0
for (i in 1:length(patient$Time_days)) {
j = i
#In case two events occur at the same time
while ((patient[j, "Time_days"] == patient[j - 1, "Time_days"]) &&
(j > 1)) {
j = j - 1
}
if (j == 1) {
time.start = 0
}
else{
if (patient[j, "year"] == patient[j - 1, "year"])
time.start = patient[j - 1, "Time_days"] + 1
else{
time.start = 0
}
}
time.end = patient[i, "Time_days"]
# change all values to 1-year format
while (time.start > 365) {
time.start = time.start - 365
}
while (time.end > 365) {
time.end = time.end - 365
}
start = c(start, time.start)
end = c(end, time.end)
}
patient$start = start
patient$end = end
# Add next year's event to current year for completion
pat2 = patient
j = 1
for (i in 1:(dim(patient)[1] - 1)) {
if (patient[i, "year"] != patient[i + 1, "year"]) {
#when the year difference is more than 1
for (y in patient[i, "year"]:(patient[i + 1, "year"] - 1)) {
#Event to be added
pevent = patient[(i + 1), ]
pevent$end = 365
if (y == patient[i, "year"]) {
pevent$start = patient$end[i] + 1
}
else{
pevent$start = 0
}
pevent$year = y
pevent$year.label = paste("year", y, sep = " ")
pat2 = rbind(pat2[1:j, ], pevent , pat2[(j + 1):dim(pat2)[1], ])
j = j + 1
}
}
j = j + 1
}
return(pat2)
}
#------------------------
# plot the patient timeline
#------------------------
plotTimeline <- function(patient, patientID, mycolors, mycodes) {
years = unique(patient$year.label)
years = years[order(years, decreasing=TRUE)]
#years = c("year 4", "year 3", "year 2", "year 1")
ggplot(patient) +
geom_segment(
aes(
x = start,
xend = end,
y = year.label,
yend = year.label,
colour = color
),
size = 14,
lineend = "butt"
) +
scale_y_discrete(limits = years) +
ggtitle(paste("Patient ", patientID, sep = "")) +
scale_colour_manual(values = mycolors,
limits = mycolors,
label = mycodes) +
labs(fill = "UMLS grouping") +
theme(
#Add a title
plot.title = element_text(hjust = 0.5, size = 50),
#Remove elements
legend.position = "none",
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
#Add a border
panel.border = element_rect(
colour = "black",
fill = NA,
size = 1
)
)
}
patientsTimelines(pat)
patientsTimelines(events, umls)
patients = unique(events$PatientID)
for (patient in patients) {
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
plotTimeline(pat, patient, mycolors, mycodes)
}
patient = 1
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
plotTimeline(pat, patient, mycolors, mycodes)
patient = 2
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
plotTimeline(pat, patient, mycolors, mycodes)
patient=3
#Obtain only the indexes for a particular patient
patient.indexes = which(events$PatientID == patient)
single.patient = events[patient.indexes,]
#Calculate the timeline rows (one row is one year)
pat = calculateTimeline(single.patient, umls)
plotTimeline(pat, patient, mycolors, mycodes)
library(gridExtra)
